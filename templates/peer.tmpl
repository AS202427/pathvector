# {{ .Peer.Name }} {{ .Peer.Asn }} last operation at {{ .Peer.QueryTime }}

define AS{{ .Peer.Asn }}_MAXPFX_v4 = {{ .Peer.MaxPrefix4 }};
define AS{{ .Peer.Asn }}_MAXPFX_v6 = {{ .Peer.MaxPrefix6 }};

{{ if not (eq .Peer.Type "upstream") -}}
define AS{{ .Peer.Asn }}_PFX_v4 = [
{{ BirdSet .Peer.PrefixSet4 }}
];

define AS{{ .Peer.Asn }}_PFX_v6 = [
{{ BirdSet .Peer.PrefixSet6 }}
];

{{ end -}}

{{ $peer := .Peer }}
{{- $global := .Config }}
{{- $af := "4" }}
{{- range $i, $neighbor := .Peer.NeighborIps }}
{{- if Contains $neighbor ":" }}
{{ $af = "6" }}
{{- end -}}
protocol bgp AS{{ $peer.Asn }}v{{ $af }}_{{ $i }} {
    local as ASN;
    neighbor {{ $neighbor }} as {{ $peer.Asn }};
    description "AS{{ $peer.Asn }} {{ $peer.Name }}";
    {{ if $peer.Disabled }}disabled;{{ end }}
    {{- if $peer.Passive }}passive;{{ end }}
    {{- if $peer.Multihop }}multihop 255;{{ end }}
    ipv{{ $af }} {
        import keep filtered;
        import limit AS{{ $peer.Asn }}_MAXPFX_v{{ $af }} action disable;
        import filter {
            reject_bogons();
            strip_communities();
            bgp_local_pref = {{ $peer.LocalPref }};
            honor_graceful_shutdown();
            {{ $peer.PreImport }}
            {{- if not (eq $peer.Prepends 0) }}
            {{- range $i := Iterate $peer.Prepends }}
            bgp_path.prepend(ASN);
            {{- end -}}
            {{- end -}}
            {{ if eq $peer.Type "upstream" -}}
            bgp_large_community.add((ASN,0,102)); # Learned from upstream
            reject;
            {{ else if eq $peer.Type "peer" -}}
            reject_transit();
            if (net ~ AS{{ $peer.Asn }}_PFX_v{{ $af }}) then {
                bgp_large_community.add((ASN,0,102)); # Learned from peer
                accept;
            }
            {{ else if eq $peer.Type "downstream" -}}
            reject_transit();
            if (net ~ AS{{ $peer.Asn }}_PFX_v{{ $af }}) then {
                bgp_large_community.add((ASN,0,102)); # Learned from downstream
                accept;
            }
            {{ end }}
        };

        export filter {
            {{ $peer.PreExport -}}
            accept_local(); # Originated
            {{ if eq $peer.Type "upstream" -}}
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            {{ else if eq $peer.Type "peer" -}}
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            {{ else if eq $peer.Type "downstream" -}}
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Downstream
            if ((ASN,0,103) ~ bgp_large_community) then accept; # Upstream
            {{ end -}}
            reject;
        };
    };
}
{{end}}
